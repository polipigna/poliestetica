# Poliestetica - Project Context

## 🏥 Panoramica del Progetto

**Azienda:** Poliestetica Pignatelli Srl  
**Settore:** Poliambulatorio medico specializzato in medicina estetica  
**Sede:** Via Battaglia 71/C, 35020 Albignasego (PD)  
**Responsabile:** Elio Pignatelli, Amministratore Unico

### Obiettivo
Sistema di Gestione Compensi Medici automatizzato per:
- Import automatico fatture da Fatture in Cloud via API
- Calcolo automatico compensi con formule personalizzabili per medico
- Gestione anomalie e errori di importazione
- Report e export in Excel/PDF
- Chiusura mensile con controlli e blocco modifiche
- Scalabilità per futura seconda sede

## 🏗️ Architettura Tecnica

### Stack Tecnologico
- **Frontend:** Next.js 14 con App Router
- **Database:** Supabase (PostgreSQL gestito + Auth) - Piano Pro consigliato
- **Deployment:** Vercel
- **Styling:** Tailwind CSS
- **Icone:** Lucide React
- **State Management:** Zustand (previsto)

### Struttura Cartelle
src/
├─ app/                     # App Router (route = folder)
│  ├─ layout.tsx            # shell globale (Header, Navigation, <main>)
│  ├─ page.tsx              # dashboard (root)
│  ├─ import/page.tsx       # Import Fatture
│  ├─ medici/page.tsx       # Gestione Medici
│  └─ compensi/page.tsx     # Calcola Compensi
│
├─ components/              # SOLO UI riusabili (Client Components)
│  ├─ ui/                   # atomi piccoli (Button, Card, Badge, Modal)
│  ├─ FatturaTable.tsx      # pezzi dei feature‑page che servono altrove
│  └─ MenuCard.tsx
│
├─ lib/                     # puro JavaScript/TypeScript (zero React)
│  ├─ utils.ts              # formatter, parser, ecc.
│  ├─ hooks.ts              # hook leggeri (useDebounce, useMediaQuery…)
│  └─ types.ts              # shared types & enums
│
├─ services/                # chiamate di rete o wrapper DB
│  ├─ fatture.ts            # fetchFatture(), syncFatture()
│  └─ medici.ts
│
└─ store.ts                 # piccolo Zustand/Context per stato globale

## 📦 Moduli Principali

### 1. Dashboard ✅
- Menu a 6 card con illustrazioni personalizzate
- Navigazione superiore persistente
- Sistema notifiche
- Selector ruolo (Admin/Segretaria/Responsabile)

### 2. Import Fatture ✅
- Sincronizzazione da Fatture in Cloud API
- Gestione anomalie (medico mancante, codice sconosciuto, duplicati)
- Import incrementale (solo fatture nuove)
- Serie fatture: Principale, IVA, M (ignora serie E)
- Export Excel/PDF con filtro date
- Import automatico alle 22:00

### 3. Gestione Medici ✅ (v4)
- CRUD medici completo
- Rule builder per compensi:
  - Percentuale su netto/lordo
  - A scaglioni: €X ogni €Y imponibile
  - Quota fissa: €X ogni Y prestazioni
- Import/Export Excel per costi prodotti
- Gestione eccezioni per prestazione/prodotto
- Unità di misura prodotti (fiala, ml, siringa, ecc.)
- Tab Simulatore compensi (solo admin)

### 4. Calcola Compensi ✅ (v2)
- Sistema chiusura gerarchico: medici → mese generale
- Gestione fatture con/senza IVA:
  - Con IVA: FT/2024/123IVA (22%)
  - Senza IVA: FT/2024/123 (lordo = netto)
- Workflow calcolo compensi
- Modifica manuale con tracciabilità
- Gestione anomalie prodotti non mappati
- Export Excel/PDF per tipologia fattura

### 5. Da Sviluppare
- **Statistiche:** Dashboard KPI
- **Archivio:** Storico periodi + storico import + report

## 🔑 Sistema Permessi

| Azione | Admin | Segretaria/Responsabile |
|--------|-------|------------------------|
| Visualizzare dati | ✅ | ✅ |
| Modificare compensi | ✅ | ✅ (solo se medico+mese aperti) |
| Modificare costi prodotti | ✅ | ✅ |
| Modificare anagrafica medici | ✅ | ❌ |
| Chiudere singolo medico | ✅ | ✅ |
| Riaprire singolo medico | ✅ | ✅ (solo se mese aperto) |
| Chiudere mese | ✅ | ✅ |
| Riaprire mese | ✅ | ❌ |
| Download Excel/PDF | ✅ | ✅ (dopo chiusura mese) |

## 🎨 Design System

### Colori Brand
- Primary: `#03A6A6` (turchese)
- Secondary: `#6192A9` (blu)
- Accent: `#8C786C`, `#D9AC9C`, `#E9EDF2`

### UI/UX Guidelines
- Modal React personalizzati (no alert/confirm nativi per compatibilità iframe)
- Stili inline per colori custom (problemi con Tailwind in artifacts)
- Campi read-only con sfondo grigio per non-admin
- Indicatori visivi stati (lucchetto aperto/chiuso)

## 🔄 Workflow Chiave

### Chiusura Mensile
1. **Chiusura Medici** (reversibile)
   - Verifica fatture aggiornate (API check)
   - Checklist: fatture importate, anomalie risolte, calcoli verificati
   - Blocco automatico se anomalie presenti

2. **Chiusura Mese** (irreversibile)
   - Condizione: TUTTI i medici chiusi
   - Abilita passaggio al mese successivo
   - Consolida dati per reportistica

### Calcolo Compensi
Per ogni voce fattura:

Determina base (lordo o netto secondo regola)
Se lordo = netto (fatture senza IVA) → usa netto
Detrae costo prodotto (se detraiCosto = true)
Applica regola compenso (%, scaglioni, fisso)
Risultato: compenso finale


**⚠️ NOTA:** Attualmente usa 50% fisso per demo. In produzione userà regole reali da Gestione Medici.

## 🔌 Integrazioni

### Fatture in Cloud API
```javascript
// Verifica fatture aggiornate
GET /c/{company_id}/issued_documents
?supplier_id={medicoId}
&modified_after={lastImportDate}
&fields=id,number,modified_at
Supabase (previsto)

Autenticazione utenti
Storage fatture e compensi
Real-time updates
Backup point-in-time (Piano Pro)

📝 Note Importanti per lo Sviluppo
Da Implementare per Produzione

Integrazione Gestione Medici ↔ Calcola Compensi

Leggere regole reali invece di 50% fisso
Sincronizzare costi prodotti
Aggiornare listino quando si mappa nuovo prodotto


Performance

Virtualizzazione liste lunghe (react-window)
Lazy loading dettagli
Ottimizzare useMemo/useCallback


Testing

Workflow chiusura con edge cases
Calcolo compensi con diverse regole
Gestione concorrenza modifiche


Audit Trail

Log completo modifiche
Chi/quando/cosa per compliance



Convenzioni Codice

TypeScript strict mode
React functional components con hooks
Naming: camelCase per variabili, PascalCase per componenti
Commenti in italiano per logica business

Deployment

Branch main → produzione automatica su Vercel
Branch develop → staging
Environment variables in .env.local

🚀 Quick Start
bash# Clone repository
git clone [repo-url]

# Install dependencies
npm install

# Environment setup
cp .env.example .env.local
# Configura Supabase e Fatture in Cloud API keys

# Development
npm run dev

# Build
npm run build

# Test (quando implementati)
npm run test
📞 Contatti Tecnici
Per domande tecniche sul progetto, contattare il team di sviluppo.

Ultimo aggiornamento: [Data corrente]
Versione: 1.0.0

Questo file `project_context.md` fornisce tutto il contesto necessario per Claude Code o altri sviluppatori che devono lavorare sul progetto. Include:

1. **Panoramica completa** del progetto e obiettivi
2. **Architettura tecnica** dettagliata con struttura cartelle
3. **Descrizione moduli** con stato di implementazione
4. **Sistema permessi** in formato tabellare chiaro
5. **Design system** con colori e guidelines
6. **Workflow chiave** spiegati passo-passo
7. **Integrazioni API** con esempi
8. **Note per produzione** con todo list chiara
9. **Quick start** per iniziare velocemente

Il documento è strutturato per essere facilmente navigabile e fornire rapidamente le informazioni necessarie per comprendere e lavorare sul progetto.