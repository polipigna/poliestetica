📋 Poliestetica - Project Context (v2.0)
🏥 PANORAMICA PROGETTO
Azienda: Poliestetica Pignatelli Srl
Settore: Poliambulatorio medico specializzato in medicina estetica
Sede: Via Battaglia 71/C, 35020 Albignasego (PD)
Responsabile: Elio Pignatelli, Amministratore Unico
P.IVA: 05096170286
Obiettivo Principale
Sistema di Gestione Compensi Medici automatizzato per eliminare il lavoro manuale di calcolo e gestione compensi, con import automatico fatture e calcolo intelligente basato su regole personalizzabili per medico.
🏗️ ARCHITETTURA TECNICA
Stack Tecnologico

Frontend: Next.js 14 con App Router
Database: Supabase (PostgreSQL + Auth) - Piano Pro per backup
Deployment: Vercel
Styling: Tailwind CSS
Icone: Lucide React
State: Context API (Zustand previsto per produzione)
Testing: Jest + React Testing Library (da implementare)

Struttura Progetto
/workspaces/poliestetica/
├── src/
│   ├── app/                      # Next.js App Router
│   │   ├── layout.tsx           # Layout globale con navigation
│   │   ├── page.tsx             # Dashboard homepage
│   │   ├── import/page.tsx      # Import Fatture
│   │   ├── medici/page.tsx      # Gestione Medici
│   │   ├── compensi/page.tsx    # Calcola Compensi
│   │   └── temp/artifacts/      # Componenti React da integrare
│   │
│   ├── components/              # Componenti UI riutilizzabili
│   │   ├── ui/                 # Componenti base (Button, Modal, etc)
│   │   ├── DevTools.tsx        # Pannello sviluppo (solo dev)
│   │   └── shared/             # Componenti condivisi
│   │
│   ├── data/                   # Dati di configurazione
│   │   ├── codici_poliestetica_app.json  # 112 codici validi
│   │   └── mock/               # Dati mock per sviluppo
│   │       ├── index.ts        # Export centralizzato + helpers
│   │       ├── medici-regole.json    # 10 medici con regole
│   │       ├── pazienti.json        # 50 pazienti demo
│   │       └── utenti.json          # 3 utenti sistema
│   │
│   ├── utils/                  # Utility functions
│   │   ├── fattureGenerator.ts # Generatore fatture mock
│   │   └── fattureHelpers.ts   # Helper functions
│   │
│   ├── hooks/                  # React hooks personalizzati
│   │   └── useFatture.ts       # Hook gestione fatture
│   │
│   └── types/                  # TypeScript types
│       └── index.ts            # Type definitions globali
📐 SISTEMA CODIFICA TRATTAMENTI
Struttura Codici [CRITICO]
[N]PPP[MMM]
 │  │   └─> Codice Prodotto/Macchinario (3 caratteri)
 │  └─────> Codice Prestazione (3-4 caratteri) - SEMPRE PRESENTE
 └────────> Cifra esenzione IVA (1 numero) - OPZIONALE, DA IGNORARE
Regole di Composizione
1️⃣ PRESTAZIONE CON PRODOTTI
Voce 1: [PPP]     "Botox viso"              €350.00
Voce 2: [PPPMMM]  "BOTOX VISO - ALLERGAN"   €0.00    2 fiale
⚠️ SEMPRE 2+ voci separate, anche con un solo prodotto
2️⃣ PRESTAZIONE CON MACCHINARIO
Voce 1: [PPPMMM]  "Laser CO2 frazionato"    €450.00
⚠️ SEMPRE voce unica composta
3️⃣ PRESTAZIONE SEMPLICE
Voce 1: [PPP]     "Consulenza estetica"     €150.00
Vincoli Assoluti

❌ Prodotto/Macchinario MAI da soli
✅ 112 combinazioni valide totali
✅ Prestazioni: 51 (16 con prodotti, 9 con macchinari, 26 semplici)
✅ Prodotti: 34 | Macchinari: 6

🗄️ STRUTTURA DATI
Fattura Completa
typescriptinterface Fattura {
  id: number;
  numero: string;              // "FT/2024/1251" o "FT/2024/1251IVA"
  serie: "FT" | "FI" | "M";    // Ignora serie "E"
  data: string;                // "2024-12-20"
  paziente: string;
  medicoId: number | null;     // null = anomalia
  medicoNome: string | null;
  imponibile: number;
  iva: number;                 // 0 o 22%
  totale: number;
  conIva: boolean;
  stato: 'da_importare' | 'verificata' | 'importata' | 'anomalia';
  importata: boolean;
  anomalie: string[];          // Array anomalie fattura
  voci: VoceFattura[];
}
Voce Fattura
typescriptinterface VoceFattura {
  id: number;
  codice: string;              // "3TOX" o "3TOXVEX"
  descrizione: string;
  tipo: 'prestazione' | 'prodotto';
  prestazionePadre?: string;   // Per prodotti: codice prestazione
  importoNetto: number;        // 0 per prodotti
  importoLordo: number;
  quantita: number;
  unita: string;               // "fiala", "ml", "unità", etc
  anomalie: string[];
}
📦 MODULI IMPLEMENTATI
1. Dashboard ✅

Menu 6 card con navigazione
Sistema notifiche real-time
Selector ruolo utente
Widget verifica codici sistema

2. Import Fatture ✅ (v3)
Nuova struttura prestazioni/prodotti:

Prestazioni con importo > 0
Prodotti sempre €0
Associazione automatica per prefisso

Anomalie gestite:

👤 medico_mancante
💰 prodotto_con_prezzo
🔗 prodotto_orfano
📦 prestazione_incompleta
🔁 prestazione_duplicata
❓ codice_sconosciuto
⚖️ unita_incompatibile
🔢 quantita_anomala

3. Gestione Medici ✅ (v4)

CRUD completo medici
Regole compensi configurabili:

Percentuale (su netto/lordo)
Scaglioni (€X ogni €Y)
Quota fissa (€X ogni Y prestazioni)
Importo fisso


Costi prodotti personalizzati per medico
Import/Export Excel funzionante
Tab simulatore compensi

4. Calcola Compensi ✅ (v2)
⚠️ DA AGGIORNARE per nuova struttura multi-prodotto

Chiusura gerarchica: medici → mese
Gestione IVA differenziata
Modifica manuale compensi
Export Excel/PDF per tipologia

5. Login ✅

3 ruoli: Admin, Segretaria, Responsabile
Credenziali demo disponibili
Captcha dopo 2 tentativi

🔑 SISTEMA PERMESSI
AzioneAdminAltri RuoliVisualizzare dati✅✅Modificare compensi✅✅ (se medico+mese aperti)Modificare costi prodotti✅✅Modificare anagrafica✅❌Chiudere medico✅✅Riaprire medico✅✅ (se mese aperto)Chiudere mese✅✅Riaprire mese✅❌
🎨 DESIGN SYSTEM
Colori Brand
css--primary: #03A6A6;    /* Turchese */
--secondary: #6192A9;  /* Blu */
--accent-1: #8C786C;
--accent-2: #D9AC9C;
--neutral: #E9EDF2;
UI Guidelines

Modal React custom (no alert/confirm nativi)
Stili inline per colori in artifacts
Feedback visivo immediato
Loading states durante operazioni

📊 DATI MOCK E CONFIGURAZIONE
File Dati Disponibili

codici_poliestetica_app.json: 112 combinazioni valide
medici-regole.json: 10 medici con regole e costi
pazienti.json: 50 nomi italiani
utenti.json: 3 utenti sistema

Accesso Centralizzato
typescript// Import da @/data/mock/index
import { 
  medici, 
  getCostoProdotto, 
  isCodiceValido,
  parseCodiceFattura,
  calcolaCompenso 
} from '@/data/mock/index';
Generatore Fatture
typescript// Configurazione
const config = {
  numeroFatture: 200,
  percentualeAnomalie: 15,
  rangeGiorni: 90,
  scenario: 'normale'
};

// Uso
FattureGenerator.generate(config);
FattureGenerator.save(); // localStorage
🔄 WORKFLOW PRINCIPALI
Import Fatture
1. SYNC da API → 2. IDENTIFICA anomalie → 3. RISOLVI interattivo → 4. IMPORT DB
Chiusura Mensile
1. Verifica fatture API → 2. Chiudi singoli medici → 3. Chiudi mese → 4. Export
Calcolo Compensi
1. Base (netto/lordo) → 2. Detrai costi prodotti → 3. Applica regola → 4. Compenso
🚧 DA IMPLEMENTARE
Alta Priorità

 Aggiornare Calcola Compensi per multi-prodotto
 Integrazione API Fatture in Cloud reale
 Sistema verifica codici automatico
 Validazione CF/IBAN/P.IVA

Media Priorità

 Modulo Statistiche (KPI dashboard)
 Modulo Archivio (storico)
 State management con Zustand
 Testing suite completa

Bassa Priorità

 Audit trail completo
 Bulk operations
 Notifiche email
 Dark mode

🔌 INTEGRAZIONI (PRODUZIONE)
Fatture in Cloud API
javascriptGET /c/{company_id}/issued_documents?modified_after={date}
GET /c/{company_id}/products  // Per verifica codici
Supabase Tables
sql-- Da creare
tipo_prestazioni (codice, descrizione, richiede_prodotti, richiede_macchinario)
prestazioni_prodotti_validi (prestazione_codice, prodotto_codice)
fatture (struttura come interfaccia)
compensi_calcolati (medico_id, fattura_id, importo, data_calcolo)
🚀 QUICK START
bash# Clone e setup
git clone [repo]
cd poliestetica
npm install

# Configurazione
cp .env.example .env.local
# Aggiungi keys per Supabase e API

# Development
npm run dev

# Build produzione
npm run build

# Genera fatture mock
# Apri app → DevTools → Genera fatture
📝 NOTE TECNICHE
Convenzioni Codice

TypeScript strict mode sempre ON
Functional components + hooks
camelCase variabili, PascalCase componenti
Commenti business logic in italiano
Import assoluti con @/

Performance

Lazy loading componenti pesanti
Virtualizzazione liste > 100 items
Debounce su input di ricerca
Memoizzazione calcoli complessi

Sicurezza

Validazione input lato client E server
Sanitizzazione codici fiscali/IBAN
Rate limiting API calls
CORS configurato per domini autorizzati